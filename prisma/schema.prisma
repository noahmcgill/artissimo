// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
  GUEST
}

enum CourseAccessRole {
  INSTRUCTOR
  STUDENT
  GUEST
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum BatchInvitationCreationStatus {
  PENDING
  COMPLETE
}

model User {
  id         String   @id @default(uuid())
  role       UserRole @default(GUEST)
  email      String   @unique
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  UserCourseAccess UserCourseAccess[]
  ChapterAuthors   ChapterAuthor[]
  Invitations      Invitation[]
}

model Invitation {
  id             String           @id @default(uuid())
  email          String
  courseId       String?
  course         Course?          @relation(fields: [courseId], references: [id])
  invitedById    String
  invitedByUser  User             @relation(fields: [invitedById], references: [id])
  role           UserRole         @default(GUEST)
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now())

  @@unique([email, courseId])
}

model BatchInvitationRequest {
  id          String                        @id @default(uuid())
  status      BatchInvitationCreationStatus @default(PENDING)
  errors      Json                          @default("[]")
  createdAt   DateTime                      @default(now())
}

model Course {
  id          String   @id @default(uuid())
  title       String
  crn         String   @unique
  meetingDays String
  meetingTime DateTime
  start       DateTime
  end         DateTime
  bookId      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  book             Book?          @relation(fields: [bookId], references: [id])
  
  UserCourseAccess UserCourseAccess[]
  Invitations      Invitation[]
}

model UserCourseAccess {
  userId String
  courseId String
  role CourseAccessRole @default(GUEST)
  
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  @@id([userId, courseId])
}

model Book {
  id       String   @id @default(uuid())
  title    String
  coverUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
  chapters Chapter[]
}

model Chapter {
  id       String   @id @default(uuid())
  bookId   String
  title    String
  order    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  book    Book    @relation(fields: [bookId], references: [id])
  authors ChapterAuthor[]
  contents ChapterContent[]
  media    Media[]
  
  @@unique([bookId, order])
}

model ChapterAuthor {
  chapterId String
  userId String
  
  chapter Chapter @relation(fields: [chapterId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  
  @@id([chapterId, userId])
}

model ChapterContent {
  chapterId String
  createdAt DateTime
  content   Json
  
  chapter Chapter @relation(fields: [chapterId], references: [id])
  
  @@id([chapterId, createdAt])
}

model Media {
  id          String   @id @default(uuid())
  chapterId   String
  title       String?
  contentType String?
  url         String
  
  chapter Chapter @relation(fields: [chapterId], references: [id])
}
